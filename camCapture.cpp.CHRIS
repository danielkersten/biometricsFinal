#include "cv.h"
#include "highgui.h"
#include<stdio.h>

int main()
{
	//Smallest face size we want to accept
	CvSize minFeatureSize = cvSize(20,20);

	//Limit search to 1 face, this should help with some of the lag
	int flags = CV_HAAR_FIND_BIGGEST_OBJECT | CV_HAAR_DO_ROUGH_SEARCH;

	float search_scale_factor = 1.1f;

	CvCapture * capture = cvCaptureFromCAM(1);
	if(!capture)
	{
		fprintf(stderr,"ERROR: Capture is null! \n");
		getchar();
		return -1;
	}
	CvHaarClassifierCascade *cascade = (CvHaarClassifierCascade *)cvLoad("/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml");
	CvMemStorage * storage = cvCreateMemStorage();

	cvNamedWindow("mywindow", CV_WINDOW_AUTOSIZE);
	while(1)
	{
		IplImage * capFrame = cvQueryFrame(capture);
		IplImage * grayCap = cvCreateImage(cvGetSize(capFrame),8,1);
		cvCvtColor(grayCap,capFrame,CV_BGR2GRAY);
		cvEqualizeHist(grayCap,grayCap);
		if(!capFrame)
		{
			fprintf(stderr,"ERROR: frame is NULL\n");
			getchar();
			break;
		}
		IplImage *frame = cvCreateImage(cvSize((int)((capFrame->width*50)/100), (int)((capFrame->height*50)/100) ), 8,1);
		cvResize(capFrame,frame);	

		CvSeq *faces = cvHaarDetectObjects(frame,cascade,storage,1.1,3,0,cvSize(40,40));
		//CvSeq * faces = NULL;
		if(faces)
		{
			for(int i=0;i<faces->total;i++)
			{
				CvRect *r = (CvRect *)cvGetSeqElem(faces,i);
				cvRectangle(frame,cvPoint(r->x,r->y),cvPoint(r->x+r->width,r->y+r->height),CV_RGB(255,0,0),1,8,0);
			}
		}
		cvShowImage("mywindow",frame);
		if((cvWaitKey(1) &255) == 27)break;
	}
	cvReleaseCapture(&capture);
	cvDestroyWindow("mywindow");
	return 0;
}
